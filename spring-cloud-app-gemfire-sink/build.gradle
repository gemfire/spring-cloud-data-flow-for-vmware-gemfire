plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id "io.freefair.lombok" version "8.0.1"
    id "io.spring.dependency-management"
    id 'gemfire-repo-artifact-publishing'
}

group = 'com.vmware.gemfire'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    compileJava {
        extendsFrom annotationProcessor
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    title = "Spring Cloud Stream App Source for VMware GemFire ${getGemFireBaseVersion()} Java API Reference"
    failOnError=false
}

project.ext.set("pomProjectLongName", "Spring Cloud Stream App Sink for VMware GemFire")
project.ext.set("pomProjectArtifactName", "spring-cloud-app-gemfire-sink")
project.ext.set("pomProjectDescription", "Spring Cloud Stream App Sink For VMware GemFire")

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        mavenBom("org.springframework.cloud.stream.app:stream-applications-core:${springStreamApplicationCoreVersion}")
        mavenBom("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    api project(":spring-cloud-consumer-gemfire")

    testImplementation "org.springframework.cloud:spring-cloud-stream:${springCloudStringVersion}:test-binder"
    testImplementation "org.springframework.cloud:spring-cloud-stream-binder-test:${springCloudStringVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "com.vmware.gemfire:gemfire-testcontainers:${gemfireTestcontainersVersion}"

}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        credentials {
            username "$gemfireRepoUsername"
            password "$gemfireRepoPassword"
        }
        url = uri("https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire")
    }
    def additionalMavenRepoURLs = project.ext.find('additionalMavenRepoURLs')
    if (additionalMavenRepoURLs != null && !additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
        additionalMavenRepoURLs.split(',').each {
            project.getRepositories()
                    .maven(mavenRepository -> {
                        mavenRepository.setUrl(uri(it.toString()))
                    })
        }
    }
}

String getGemFireBaseVersion() {
    return getBaseVersion(gemfireVersion)
}

String getSpringCloudBaseVersion() {
    return getBaseVersion(springCloudVersion)
}

String getBaseVersion(String version) {
    def split = "$version".split("\\.")
    if (split.length < 2) {
        throw new RuntimeException("version is malformed")
    }
    return "${split[0]}.${split[1]}"
}

String getSpringBootBaseVersion() {
    return getBaseVersion(springBootVersion)
}
