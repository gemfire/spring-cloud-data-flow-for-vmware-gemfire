plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id "io.freefair.lombok" version "8.0.1"
    id 'org.springframework.boot'
    id "io.spring.dependency-management"
    id 'gemfire-repo-artifact-publishing'
}

group = 'com.vmware.gemfire'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    title = "Spring Cloud Dataflow Sink for VMware GemFire Java API Reference"
    failOnError = false
}

project.ext.set("pomProjectLongName", "Spring Cloud Dataflow Sink for VMware GemFire")
project.ext.set("pomProjectArtifactName", "gemfire-sink-kafka")
project.ext.set("pomProjectDescription", "Spring Cloud Dataflow Sink for VMware GemFire using Kafka as a binder")

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-stream-dependencies:${springCloudStreamDependenciesVersion}")
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation "org.springframework.cloud:spring-cloud-stream-binder-kafka"
    implementation "com.vmware.gemfire:spring-cloud-consumer-2021.0-gemfire-9.15:${springCloudConsumerGemfireVersion}"
    testImplementation "org.springframework.kafka:spring-kafka-test:2.8.6"
    testImplementation "org.testcontainers:kafka:${testcontainersVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.vmware.gemfire:gemfire-testcontainers:${gemfireTestContainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "com.vmware.gemfire:geode-core:${gemfireVersion}"
    testImplementation "com.vmware.gemfire:geode-cq:${gemfireVersion}"
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation "org.awaitility:awaitility:4.2.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        credentials {
            username "$gemfireRepoUsername"
            password "$gemfireRepoPassword"
        }
        url = uri("https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire")
    }
    def additionalMavenRepoURLs = project.ext.find('additionalMavenRepoURLs')
    if (additionalMavenRepoURLs != null && !additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
        additionalMavenRepoURLs.split(',').each {
            project.getRepositories()
                    .maven(mavenRepository -> {
                        mavenRepository.setUrl(uri(it.toString()))
                    })
        }
    }
}

String getGemFireBaseVersion() {
    return getBaseVersion(gemfireVersion)
}

String getSpringCloudBaseVersion() {
    return getBaseVersion(springCloudVersion)
}

String getBaseVersion(String version) {
    def split = "$version".split("\\.")
    if (split.length < 2) {
        throw new RuntimeException("version is malformed")
    }
    return "${split[0]}.${split[1]}"
}

String getSpringBootBaseVersion() {
    return getBaseVersion(springBootVersion)
}
