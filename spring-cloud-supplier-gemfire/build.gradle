plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id "io.freefair.lombok" version "8.0.1"
    id "io.spring.dependency-management"
    id 'gemfire-repo-artifact-publishing'
}

group = 'com.vmware.gemfire.spring.cloud'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
    compileJava {
        extendsFrom annotationProcessor
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    title = "Spring Cloud Dataflow Supplier ${getSpringCloudBaseVersion()} for VMware GemFire ${getGemFireBaseVersion()} Java API Reference"
    failOnError=false
}

project.ext.set("pomProjectLongName", "Spring Cloud Dataflow Supplier for VMware GemFire")
project.ext.set("pomProjectArtifactName", "spring-cloud-supplier-${getSpringCloudBaseVersion()}-gemfire-${getGemFireBaseVersion()}")
project.ext.set("pomProjectDescription", "Spring Cloud Dataflow Supplier For VMware GemFire")

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    api project(':spring-cloud-common-gemfire')

    implementation 'org.json:json:20200518'
    implementation "com.vmware.gemfire:spring-integration-5.5-gemfire-${getGemFireBaseVersion()}:${springIntegrationGemFireVersion}"

    implementation "com.vmware.gemfire:spring-boot-${getSpringBootBaseVersion()}-gemfire-${getGemFireBaseVersion()}:${springBootGemFireVersion}"
    implementation "com.vmware.gemfire:spring-boot-logging-${getSpringBootBaseVersion()}-gemfire-${getGemFireBaseVersion()}:${springBootGemFireVersion}"
    implementation 'org.projectlombok:lombok:1.18.28'

    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate:hibernate-validator:6.2.5.Final'

    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.1'

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'com.vmware.gemfire:gemfire-testcontainers:1.1'
    testImplementation 'io.projectreactor:reactor-test:3.4.18'
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        credentials {
            username "$gemfireRepoUsername"
            password "$gemfireRepoPassword"
        }
        url = uri("https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire")
    }
    def additionalMavenRepoURLs = project.ext.find('additionalMavenRepoURLs')
    if (additionalMavenRepoURLs != null && !additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
        additionalMavenRepoURLs.split(',').each {
            project.getRepositories()
                    .maven(mavenRepository -> {
                        mavenRepository.setUrl(uri(it.toString()))
                    })
        }
    }
}

String getGemFireBaseVersion() {
    return getBaseVersion(gemfireVersion)
}

String getSpringCloudBaseVersion() {
    return getBaseVersion(springCloudVersion)
}

String getBaseVersion(String version) {
    def split = "$version".split("\\.")
    if (split.length < 2) {
        throw new RuntimeException("version is malformed")
    }
    return "${split[0]}.${split[1]}"
}

String getSpringBootBaseVersion() {
    return getBaseVersion(springBootVersion)
}
